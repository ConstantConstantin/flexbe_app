#!/bin/bash -e
cd "$( dirname "${BASH_SOURCE[0]}" )"
TEMPFILE="nwjs.tar.gz"
mkdir -p ../nwjs
cd ../nwjs

VERSION="v0.60.0" # verified working, to be incremented explicitly

# check if nw is already existing and up-to-date, abort if so
if [ -f nw ]; then
	if [ -f version ] && [ "$(cat version)" == "$VERSION" ]; then
		exit 0
	else
		cd ..
		mv nwjs nwjs_old
		mkdir nwjs
		cd nwjs
	fi
fi

# determine correct executable version
OS="linux"
if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
	OS="win"
elif [[ "$OSTYPE" == "darwin"* ]]; then
	OS="osx"
else
	OS="linux"
fi
ARCH="x64"
if [ `uname -m` == "x86_64" ]; then
	ARCH="x64"
elif [ `uname -m` == "aarch64" ]; then
	ARCH="arm64"
else
	ARCH="ia32"
fi

# ready to go
echo "Downloading nwjs..."
set +e
if [ "$ARCH" == "arm64" ]; then
	main_uri="https://github.com/LeonardLaszlo/nw.js-armv7-binaries/releases/download/nw60-arm64_2022-01-08/nw60-arm64_2022-01-08.tar.gz"
	curl -sL -o $TEMPFILE $main_uri
	status=$?
	if [ $status -ne 0 ] ; then
		echo "Failed to download '$main_uri': $status"
		exit "$status"
	fi
	tar -xzf $TEMPFILE --strip-components 1
	rm $TEMPFILE
	mv docker/dist/nwjs-chrome-ffmpeg-branding/nwjs-v0.60.1-linux-arm64.tar.gz nwjs.tar.gz
	rm -rf docker
else
	main_uri="https://dl.nwjs.io/$VERSION/nwjs-$VERSION-$OS-$ARCH.tar.gz"
	curl -sL -o $TEMPFILE $main_uri
	status=$?
	if [ $status -ne 0 ] ; then
		echo "Failed to download '$main_uri': $status"
		echo "Using mirror instead..."
		mirror_uri="https://npm.taobao.org/mirrors/nwjs/$VERSION/nwjs-$VERSION-$OS-$ARCH.tar.gz"
		curl -sL -o $TEMPFILE $mirror_uri
		status=$?
		if [ $status -ne 0 ] ; then
			echo "Failed to download '$mirror_uri': $status"
			exit "$status"
		fi
	fi
fi
set -e
echo -e "Successfully downloaded nwjs!"

echo "Unpacking..."
tar -xzf $TEMPFILE --strip-components 1
rm $TEMPFILE
echo "$VERSION" > version

cd ..
if [ -f nwjs_old/nw ]; then
	rm -rf nwjs_old
fi

echo -e "Successfully installed nwjs!"
